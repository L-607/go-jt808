package main

import (
	"encoding/hex"
	"fmt"
	"github.com/cuteLittleDevil/go-jt808/protocol/model"
	"github.com/cuteLittleDevil/go-jt808/service"
	"github.com/cuteLittleDevil/go-jt808/shared/consts"
	"github.com/cuteLittleDevil/go-jt808/terminal"
	"log/slog"
	"net"
	"os"
	"strings"
	"time"
)

func init() {
	logger := slog.New(slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{
		AddSource:   true,
		Level:       slog.LevelDebug,
		ReplaceAttr: nil,
	}))
	slog.SetDefault(logger)
}

func main() {
	goJt808 := service.New(
		service.WithHostPorts("0.0.0.0:8080"),
		service.WithNetwork("tcp"),
		service.WithCustomHandleFunc(func() map[consts.JT808CommandType]service.Handler {
			return map[consts.JT808CommandType]service.Handler{
				consts.P8104QueryTerminalParams: &p8104{},
			}
		}),
	)
	go goJt808.Run()

	phone := "14419999999"
	go client(phone)
	time.Sleep(5 * time.Second) // 等待模拟器注册成功

	replyMsg := goJt808.SendActiveMessage(&service.ActiveMessage{
		Key:              phone,                           // 默认使用手机号作为唯一key 根据key找到对应终端的TCP链接
		Command:          consts.P8104QueryTerminalParams, // 下发的指令
		Body:             nil,                             // 下发的body数据 8104为空
		OverTimeDuration: 3 * time.Second,                 // 超时时间 设备这段时间没有回复则失败
	})
	var t0x0104 model.T0x0104
	if err := t0x0104.Parse(replyMsg.JTMessage); err != nil {
		panic(err)
	}
	fmt.Println(t0x0104.String())
}

func client(phone string) {
	t := terminal.New(terminal.WithHeader(consts.JT808Protocol2013, phone))
	var (
		register = t.CreateDefaultCommandData(consts.T0100Register)
		auth     = t.CreateDefaultCommandData(consts.T0102RegisterAuth)
	)
	conn, err := net.Dial("tcp", "0.0.0.0:8080")
	if err != nil {
		return
	}
	defer func() {
		_ = conn.Close()
	}()

	go func() {
		data := make([]byte, 1023)
		for {
			if n, _ := conn.Read(data); n > 0 {
				msg := fmt.Sprintf("%x", data[:n])
				if strings.HasPrefix(msg, "7e8104") {
					msg0x
					writeData, _ := hex.DecodeString(msg0x0104)
					_, _ = conn.Write(writeData)
				}
			}
		}
	}()

	_, _ = conn.Write(auth)
	time.Sleep(time.Second)
	_, _ = conn.Write(register)
	time.Sleep(time.Second)
	_, _ = conn.Write(auth)
	select {}

}

type p8104 struct {
	model.P0x8104
}

func (p p8104) OnReadExecutionEvent(_ *service.Message) {
}

func (p p8104) OnWriteExecutionEvent(message service.Message) {
	fmt.Println("0x8104发送", fmt.Sprintf("%x", message.OriginalData))
}
